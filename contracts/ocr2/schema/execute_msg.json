{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "string",
      "enum": [
        "accept_ownership",
        "request_new_round"
      ]
    },
    {
      "type": "object",
      "required": [
        "set_config"
      ],
      "properties": {
        "set_config": {
          "type": "object",
          "required": [
            "f",
            "offchain_config",
            "offchain_config_version",
            "onchain_config",
            "signers",
            "transmitters"
          ],
          "properties": {
            "f": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "offchain_config": {
              "$ref": "#/definitions/Binary"
            },
            "offchain_config_version": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "onchain_config": {
              "$ref": "#/definitions/Binary"
            },
            "signers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Binary"
              }
            },
            "transmitters": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transfer_ownership"
      ],
      "properties": {
        "transfer_ownership": {
          "type": "object",
          "required": [
            "to"
          ],
          "properties": {
            "to": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transmit"
      ],
      "properties": {
        "transmit": {
          "type": "object",
          "required": [
            "report",
            "report_context",
            "signatures"
          ],
          "properties": {
            "report": {
              "$ref": "#/definitions/Binary"
            },
            "report_context": {
              "$ref": "#/definitions/Binary"
            },
            "signatures": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Binary"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_billing"
      ],
      "properties": {
        "set_billing": {
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "$ref": "#/definitions/Billing"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_billing_access_controller"
      ],
      "properties": {
        "set_billing_access_controller": {
          "type": "object",
          "required": [
            "access_controller"
          ],
          "properties": {
            "access_controller": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_requester_access_controller"
      ],
      "properties": {
        "set_requester_access_controller": {
          "type": "object",
          "required": [
            "access_controller"
          ],
          "properties": {
            "access_controller": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_payment"
      ],
      "properties": {
        "withdraw_payment": {
          "type": "object",
          "required": [
            "transmitter"
          ],
          "properties": {
            "transmitter": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_funds"
      ],
      "properties": {
        "withdraw_funds": {
          "type": "object",
          "required": [
            "amount",
            "recipient"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "recipient": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_link_token"
      ],
      "properties": {
        "set_link_token": {
          "type": "object",
          "required": [
            "link_token",
            "recipient"
          ],
          "properties": {
            "link_token": {
              "type": "string"
            },
            "recipient": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Handler for LINK token Receive message",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_payees"
      ],
      "properties": {
        "set_payees": {
          "type": "object",
          "required": [
            "payees"
          ],
          "properties": {
            "payees": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transfer_payeeship"
      ],
      "properties": {
        "transfer_payeeship": {
          "type": "object",
          "required": [
            "proposed",
            "transmitter"
          ],
          "properties": {
            "proposed": {
              "type": "string"
            },
            "transmitter": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "accept_payeeship"
      ],
      "properties": {
        "accept_payeeship": {
          "type": "object",
          "required": [
            "transmitter"
          ],
          "properties": {
            "transmitter": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Billing": {
      "type": "object",
      "required": [
        "observation_payment",
        "recommended_gas_price",
        "transmission_payment"
      ],
      "properties": {
        "base_gas": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "gas_adjustment": {
          "description": "In percent",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        },
        "gas_per_signature": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "observation_payment": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "recommended_gas_price": {
          "description": "Should match https://fcd.terra.dev/v1/txs/gas_prices NOTE: needs to be scaled to the same amount of decimals places as LINK token",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "transmission_payment": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
