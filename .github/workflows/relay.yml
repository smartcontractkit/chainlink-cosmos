name: relay

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://postgres@localhost:5432/postgres?sslmode=disable
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # defaults:
    #   run:
    #     working-directory: ./relay
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Nix
        uses: cachix/install-nix-action@v14
        with:
          install_url: https://nixos-nix-install-tests.cachix.org/serve/vij683ly7sl95nnhb67bdjjfabclr85m/install
          install_options: "--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve"
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Compile relay
        run: nix develop -c go build -v ./pkg/terra/...

      - name: Run unit tests
        run: nix develop -c go test -v ./pkg/terra/...

      - name: Run tests with the race detector enabled
        run: nix develop -c go test -v ./pkg/terra/... -race -count=10

  lint:
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: ./relay
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Nix
        uses: cachix/install-nix-action@v14
        with:
          install_url: https://nixos-nix-install-tests.cachix.org/serve/vij683ly7sl95nnhb67bdjjfabclr85m/install
          install_options: "--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve"
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Run golangci-lint
        run: nix develop -c golangci-lint run -v --enable=gofmt --tests=false --exclude-use-default --timeout=5m0s
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.43.0

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          args: --timeout=5m0s --tests=false

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          only-new-issues: true

          # Optional: if set to true then the action will use pre-installed Go.
          # skip-go-installation: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true
