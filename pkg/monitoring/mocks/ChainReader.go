// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	query "github.com/cosmos/cosmos-sdk/types/query"

	tx "github.com/cosmos/cosmos-sdk/types/tx"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ChainReader is an autogenerated mock type for the ChainReader type
type ChainReader struct {
	mock.Mock
}

// Account provides a mock function with given fields: address
func (_m *ChainReader) Account(address types.AccAddress) (uint64, uint64, error) {
	ret := _m.Called(address)

	var r0 uint64
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(types.AccAddress) (uint64, uint64, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(types.AccAddress) uint64); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(types.AccAddress) uint64); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(types.AccAddress) error); ok {
		r2 = rf(address)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ContractState provides a mock function with given fields: contractAddress, queryMsg
func (_m *ChainReader) ContractState(contractAddress types.AccAddress, queryMsg []byte) ([]byte, error) {
	ret := _m.Called(contractAddress, queryMsg)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(types.AccAddress, []byte) ([]byte, error)); ok {
		return rf(contractAddress, queryMsg)
	}
	if rf, ok := ret.Get(0).(func(types.AccAddress, []byte) []byte); ok {
		r0 = rf(contractAddress, queryMsg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(types.AccAddress, []byte) error); ok {
		r1 = rf(contractAddress, queryMsg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxsEvents provides a mock function with given fields: events, paginationParams
func (_m *ChainReader) TxsEvents(events []string, paginationParams *query.PageRequest) (*tx.GetTxsEventResponse, error) {
	ret := _m.Called(events, paginationParams)

	var r0 *tx.GetTxsEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, *query.PageRequest) (*tx.GetTxsEventResponse, error)); ok {
		return rf(events, paginationParams)
	}
	if rf, ok := ret.Get(0).(func([]string, *query.PageRequest) *tx.GetTxsEventResponse); ok {
		r0 = rf(events, paginationParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.GetTxsEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, *query.PageRequest) error); ok {
		r1 = rf(events, paginationParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChainReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewChainReader creates a new instance of ChainReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChainReader(t mockConstructorTestingTNewChainReader) *ChainReader {
	mock := &ChainReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
