// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	query "github.com/cosmos/cosmos-sdk/types/query"

	tx "github.com/cosmos/cosmos-sdk/types/tx"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ChainReader is an autogenerated mock type for the ChainReader type
type ChainReader struct {
	mock.Mock
}

// ContractStore provides a mock function with given fields: contractAddress, queryMsg
func (_m *ChainReader) ContractStore(contractAddress types.AccAddress, queryMsg []byte) ([]byte, error) {
	ret := _m.Called(contractAddress, queryMsg)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(types.AccAddress, []byte) []byte); ok {
		r0 = rf(contractAddress, queryMsg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.AccAddress, []byte) error); ok {
		r1 = rf(contractAddress, queryMsg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxsEvents provides a mock function with given fields: events, paginationParams
func (_m *ChainReader) TxsEvents(events []string, paginationParams *query.PageRequest) (*tx.GetTxsEventResponse, error) {
	ret := _m.Called(events, paginationParams)

	var r0 *tx.GetTxsEventResponse
	if rf, ok := ret.Get(0).(func([]string, *query.PageRequest) *tx.GetTxsEventResponse); ok {
		r0 = rf(events, paginationParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.GetTxsEventResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, *query.PageRequest) error); ok {
		r1 = rf(events, paginationParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
