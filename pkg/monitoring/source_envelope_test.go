package monitoring

import (
	"context"
	"encoding/hex"
	"fmt"
	"math/big"
	"testing"
	"time"

	"github.com/cosmos/cosmos-sdk/types"
	cosmosQuery "github.com/cosmos/cosmos-sdk/types/query"
	"github.com/cosmos/cosmos-sdk/types/tx"
	relayMonitoring "github.com/smartcontractkit/chainlink-relay/pkg/monitoring"
	"github.com/smartcontractkit/chainlink-terra/pkg/monitoring/mocks"
	ocr2types "github.com/smartcontractkit/libocr/offchainreporting2/types"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

func TestEnvelopeSource(t *testing.T) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Millisecond)
	defer cancel()
	// Setup API responses
	balanceRes := []byte(`{"balance":"1234567890987654321"}`)
	setConfigRes := &tx.GetTxsEventResponse{
		TxResponses: []*types.TxResponse{
			{
				Height: 123456789,
				Logs: types.ABCIMessageLogs{
					types.ABCIMessageLog{
						Events: types.StringEvents{
							types.StringEvent{Type: "execute_contract", Attributes: []types.Attribute{
								{Key: "sender", Value: "terra1t0mw79g7rk6aueeqyqwz4a77vrgmqwpxs47cyy"},
								{Key: "contract_address", Value: "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"},
							}},
							types.StringEvent{Type: "from_contract", Attributes: []types.Attribute{
								{Key: "contract_address", Value: "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"},
								{Key: "method", Value: "propose_config"},
							}},
							types.StringEvent{Type: "message", Attributes: []types.Attribute{
								{Key: "action", Value: "/terra.wasm.v1beta1.MsgExecuteContract"},
								{Key: "module", Value: "wasm"},
								{Key: "sender", Value: "terra1t0mw79g7rk6aueeqyqwz4a77vrgmqwpxs47cyy"},
							}},
							types.StringEvent{Type: "wasm", Attributes: []types.Attribute{
								{Key: "contract_address", Value: "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"},
								{Key: "method", Value: "propose_config"},
							}},
							types.StringEvent{Type: "wasm-set_config", Attributes: []types.Attribute{
								{Key: "contract_address", Value: "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"},
								{Key: "previous_config_block_number", Value: "0"},
								{Key: "latest_config_digest", Value: "0002c245d0b4575d38cb5bb8b7b34d4b58a8b8cf9c6d4d925c15542c4ce062ac"},
								{Key: "config_count", Value: "1"},
								{Key: "signers", Value: "0d04b01e7b81d79c5ff7c0ba8fb3f09bd12273c1c478a84d2f1547b2f754b5da"},
								{Key: "signers", Value: "74f8fec126138a69bdbe6e05b9255a91f1269447ece88c57a07e5de83cb9ab9d"},
								{Key: "signers", Value: "fdc93b531eff20d8dd7115f872f00d398ff568f24aaee732d2ce18fb62e27509"},
								{Key: "signers", Value: "d77c5d17e2b43d166a343b312d7515957b2ba20395962e853781f99745e6f822"},
								{Key: "signers", Value: "8697b65476d687349573e16bceb1a6ee748c3fe4981656dd3673808ff9af1ec6"},
								{Key: "signers", Value: "a9d56584774baca0f3f451bcce230bc1c816cc41780e39c72d308fab79f23680"},
								{Key: "signers", Value: "b15355db6d3ddba6a02f3c30da00d0516bb462b3360f80ac596308cea262f28c"},
								{Key: "signers", Value: "fbe37462a4f3a8ed7e47eb296f097c8a760160a05f28f82b0baab96b144605d4"},
								{Key: "signers", Value: "f117ac6e19a17b558b2bfc732780049184fa5924857dfff6aac07e0bcefd2b46"},
								{Key: "signers", Value: "4c86e398b4708d30e597a90296c6ec9d306d17ea8f7f9d0e1267cfa2ea8dde89"},
								{Key: "signers", Value: "7e1d60331ef87c908b64a89b75a878264fb3a2099a1a5225f214931e01ebe0a5"},
								{Key: "signers", Value: "45a8e0c13d15972fc97d50cbb2e39bd0b4c75b8b4cd2dc5ba355b2cc702d494b"},
								{Key: "signers", Value: "f9ad962c062fa5d47af67b229a368b5ef7f6a46f889117b676b9d8bf42632b96"},
								{Key: "signers", Value: "e990e3738686976c46e35b11b5552a7a453ba1c62f14b84efb36e28a943d0cd0"},
								{Key: "signers", Value: "1fc37e4833745ee9a9f2bb39c9810cd43b75431dc2fe60814a2f23d00f64e7ac"},
								{Key: "signers", Value: "efdee2a3454a0a94449ed70a4e4a2d4fd113de4d56efe198d18adfa89a960dd1"},
								{Key: "transmitters", Value: "terra1pagnmhas5q0twmkqn9kcvyzezfzjqnsukz47ha"},
								{Key: "transmitters", Value: "terra17tdm630tz3u5a47pxpysd4ktltycjlckew0g3a"},
								{Key: "transmitters", Value: "terra14szqs99f0jap3f4lwqvavnct23gq2jrj9qg6nf"},
								{Key: "transmitters", Value: "terra1x2hgypr08vf466sej4zqc5wzwdfh7mw7j8lwqc"},
								{Key: "transmitters", Value: "terra1q2l2ep768vrrjfmxacpa6kl8e8aezeru9646pw"},
								{Key: "transmitters", Value: "terra1rmt28lv8cs50wtxy7qpuvwlmphdjsm2lyvtqhh"},
								{Key: "transmitters", Value: "terra167h3sh8c4pgs8grxz24pam2x764flydv3h9pd8"},
								{Key: "transmitters", Value: "terra14va5jfwuuqs9pls379c5dc2d7lyvv2yul9nrnq"},
								{Key: "transmitters", Value: "terra1qv4w60avcm653a544apsq8r6z2dqzd89ndz3ta"},
								{Key: "transmitters", Value: "terra13cxfg5awyscnj7c7u4ycwgplf528krf8c90cp6"},
								{Key: "transmitters", Value: "terra1tfx3q08q780u9uu4qlw0drn375uktfka7kgh93"},
								{Key: "transmitters", Value: "terra16mk5h5ma7ksr2vqpxcsaqxjny2ea68jap8mf6a"},
								{Key: "transmitters", Value: "terra1h0ygh9tr8t8sc97ntq5tnams9vprchxmgl9ame"},
								{Key: "transmitters", Value: "terra17rzwyj72rxzm4g2g7zy72tqn67cl3nncvd5sj4"},
								{Key: "transmitters", Value: "terra14wxk4hy63wa5punxehvc3wg2wr64hhcdnz3qm0"},
								{Key: "transmitters", Value: "terra16vueyxmul8kczd0nxvw0ge7kzfzpmtsgqc9tup"},
								{Key: "f", Value: "5"},
								{Key: "onchain_config", Value: "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAJiWgAAAAAAAAAAAAAAAAAAAAAAAAADo1KUQAA=="},
								{Key: "offchain_config_version", Value: "2"},
								{Key: "offchain_config", Value: "CIDIr6AlEIDYjuFvGICg2eYdIICU69wDKICY3JM0MAw6EAEBAQEBAQEBAQEBAQEBAQFCIN2HsmWEim5Q9pQqEkK9FKHK1/KJU9UMOpe2deyd1KSqQiBfdWovAxVFvfWjRDGFjPislKEUVacMYU1YaCX0d0LX2kIg3OZ8g+VT48FGVjBcek1zTLLCU9JUBbQ/cAbCB6CBUUFCIER7fwSH30c8pLxu1A2C/zkMd+7DtF4IitYFJodgGJBHQiBN/bQKs4HmHnujCuntsMJ9HqzcBm6yJLCCnxCFFotdpEIg5QSTg5DfEVykUPZB5kSrMloSjIIoLK9iZnbErhbo85ZCIDeiSSnLmx2gOOaGVp6QoKx7DaANLeUX94hX+6mwEdT9QiDFtnugZWIQC2MFgqU4Gb9wiAcUta5V0a039lUkEVUCDEIg5ZFI1boYHPq9ZEb3dQHoKkfi7R5lob051FP/PLVBmclCIEurfQmn3okRCjYUyuWSjtXyTQ/lQNkTtV3cxTU7pa6GQiBuLow0XCK9EZ6c89RYMHcQQHQ4EleH1hOVv4/L+aRWAUIgCRP6rMAc5frg0Xr0qM4xEgmb/U0ktHe5XlqJQu7CwahCIHHjznyYQp7h/vliR1p0mZ/5vWDhsI1iIGgN/zQr2pvCQiDTBtKqpCh31SlyYXPT29hFh7LjbT0SZNZwW/O3ryRcn0IgUaqatA7eAwQ8o0oep9RQnn1SP70CV+JjC1r1AW6JE2dCIC9A8HTvjG87C80k/2ofBJ/90PnxERpyPJmpzggV5x4YSjQxMkQzS29vV1BuSERkQXRmaWU5eXU3ZTl4dVRhaGlSZjVTNnNqQUZjNlIzUXhkWmdNcjZkSjQxMkQzS29vV0NHRkxyWkJmODN4dDhVcE5UcUJoTnN3OHNRUUJyUnJONFY1cHoyZDhqbUFwSjQxMkQzS29vV0NMa1VnblBnRDRYN28ya283dXFoeDRyTnlvN0xIQjNZckZnV3A0VjVDanN5SjQxMkQzS29vV0pQQVRRQloyb1Zqd2VVaHlUSjNNM3FQOWpoZlFpMldvSFVuYTFocFdrZ3ZESjQxMkQzS29vV005cTlITEY0UTVOTTNFR01QVHhaVnYzUG9GaHpCN3RHRGZ6Y202TkdadWJUSjQxMkQzS29vV0dlbXhFOWpkTUF1cU1LeGRwVDIzVnVlRmVxS2dKOXRUUDFVZDhUREM2WENYSjQxMkQzS29vV1JnWWJNanRrOXJza2Qybnl4V24yY2JzbVQxUnJnSHo3SmNhV2lXdmNzYXBuSjQxMkQzS29vV0I2Y21ZRzIybW5ZdU5nRGVVQlNVekVRb2hIM1V1SGsyUHBvUlBKem1LcHVjSjQxMkQzS29vV01YejloS2NzZDNoUVZZdTltQkxFVFJVM2t2VXBFQXFKVWRyWjlzeGUxZGR4SjQxMkQzS29vV01VTkVqWGRTRUpNVlFoRG5kcTZxdGV5RTlUZTl6MkU4U3pzRUJybVZ5UE15SjQxMkQzS29vV0FvcUxiWmJwR0tZZDViNnlCQXVITkd6Vkw0Q1Q4VVJVRGgybXJ0OG4zakZ4SjQxMkQzS29vV1JIUkxBc2tTdE04RkZZUXM1RDVlRmJDN3VLb3A5REhrRHpTYVpCV0tFQjFUSjQxMkQzS29vV0taeURGYTJ1Y3BpMm1Kbkw3eXJpVkdSbUQ4Qm84OXZucmFLZ1p3MVZZanN4SjQxMkQzS29vV0w5U056QlBvTTRxbVFTSGk3eDIzdFhIc01iWlNMREN0NVZUd0pCeVk0U2hNSjQxMkQzS29vV0oyeVRaa2FEWkVRdHRzcEg2cDZMOVVoU0VOYldCTVhLRk1qYXZ3S0E3a0xBSjQxMkQzS29vV01rakhxMVVTQldhVE5SakNEWXRwdzhmSnVVOTl4RVcxUmJtWU44b0h1RTl3UhEQwI23ASDAjbcBKIDo7aG6AWCA5JfQEmiAlOvcA3CAlOvcA3iAlOvcA4IB5AIKIEzs3hW7kV+myd3MI25hUbxOFPulYq0bU/bAIACSNUZzEiCdq7UFZ1ig7eeEQ9XXxM9nmPpJTJDMSBA+CEx2ks8JrRoQkJkfwc1ylB7Lc4KMygE2GxoQsE/EL0iCAGK0U4LSlBb10xoQ4961A06e5xrY3JE6x8N/GBoQXv8COMqrT8cBdiRUlMTdZBoQvLOll8+0Mz21PZOl2OL6+hoQDqgtG0m70LwSNmN07mziTRoQlsVtD1IFP+TeHfgKvt/3hBoQX3yQoypBfW/VPNUDeZLgORoQMJqPK7R1fcoCf8v+kBMKSRoQCb2V76p0YECoN5aa3fMfABoQ06Tu8bh4UAQZm3tN2BAU0BoQdV4s6fRxCBK5nJ+DQDewExoQ1Ds4K/+v7GT9HJyoqJHeqxoQvYN7OQecJ+Vl5ffYdRcKQhoQUyKAemD6j21VwDERbxIeOxoQeh9AoZZ0YfYrSR+ahpK7fQ=="},
							}},
						},
					},
				},
			},
		},
	}
	newTransmissionRes := &tx.GetTxsEventResponse{
		TxResponses: []*types.TxResponse{
			{
				Height: 987654321,
				Logs: types.ABCIMessageLogs{
					types.ABCIMessageLog{
						Events: types.StringEvents{
							types.StringEvent{Type: "execute_contract", Attributes: []types.Attribute{
								{Key: "sender", Value: "terra16vueyxmul8kczd0nxvw0ge7kzfzpmtsgqc9tup"},
								{Key: "contract_address", Value: "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"},
							}},
							types.StringEvent{Type: "from_contract", Attributes: []types.Attribute{
								{Key: "contract_address", Value: "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"},
								{Key: "method", Value: "transmit"},
								{Key: "method", Value: "transmit"},
							}},
							types.StringEvent{Type: "message", Attributes: []types.Attribute{
								{Key: "action", Value: "/terra.wasm.v1beta1.MsgExecuteContract"},
								{Key: "module", Value: "wasm"},
								{Key: "sender", Value: "terra16vueyxmul8kczd0nxvw0ge7kzfzpmtsgqc9tup"},
							}},
							types.StringEvent{Type: "wasm", Attributes: []types.Attribute{
								{Key: "contract_address", Value: "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"},
								{Key: "method", Value: "transmit"},
								{Key: "method", Value: "transmit"},
							}},
							types.StringEvent{Type: "wasm-new_transmission", Attributes: []types.Attribute{
								{Key: "contract_address", Value: "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"},
								{Key: "aggregator_round_id", Value: "452"},
								{Key: "answer", Value: "2727000000"},
								{Key: "transmitter", Value: "terra16vueyxmul8kczd0nxvw0ge7kzfzpmtsgqc9tup"},
								{Key: "observations_timestamp", Value: "1645206820"},
								{Key: "observers", Value: "0c0a080403090d070b060e0000000000000000000000000000000000000000"},
								{Key: "juels_per_fee_coin", Value: "302815889"},
								{Key: "config_digest", Value: "0002c245d0b4575d38cb5bb8b7b34d4b58a8b8cf9c6d4d925c15542c4ce062ac"},
								{Key: "epoch", Value: "1732"},
								{Key: "round", Value: "6"},
								{Key: "reimbursement", Value: "893407"},
								{Key: "observations", Value: "2724000000"},
								{Key: "observations", Value: "2726325800"},
								{Key: "observations", Value: "2726700000"},
								{Key: "observations", Value: "2726973503"},
								{Key: "observations", Value: "2726973503"},
								{Key: "observations", Value: "2726986751"},
								{Key: "observations", Value: "2727000000"},
								{Key: "observations", Value: "2727000000"},
								{Key: "observations", Value: "2727000000"},
								{Key: "observations", Value: "2727000000"},
								{Key: "observations", Value: "2727162900"},
								{Key: "observations", Value: "2727300000"}},
							},
							types.StringEvent{Type: "wasm-transmitted", Attributes: []types.Attribute{
								{Key: "contract_address", Value: "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"},
								{Key: "config_digest", Value: "0002c245d0b4575d38cb5bb8b7b34d4b58a8b8cf9c6d4d925c15542c4ce062ac"},
								{Key: "epoch", Value: "1732"},
							}},
							// NOTE This is an extra new_transmission event but for a different contract_address, config_digest, answer, etc.
							// This event should be ignored by the Source under test!
							types.StringEvent{Type: "wasm-new_transmission", Attributes: []types.Attribute{
								{Key: "contract_address", Value: "terra16vueyxmul8kczd1nxvw0ge7kzfzpmtsgqc82ac"},
								{Key: "aggregator_round_id", Value: "999"},
								{Key: "answer", Value: "9999000000"},
								{Key: "transmitter", Value: "terra1h0ygh9tr8t8sc97ntq5tnams9vprchxmgl9ame"},
								{Key: "observations_timestamp", Value: "1645209999"},
								{Key: "observers", Value: "0c0a080403090d070b060e0000000000000000000000000000000000000000"},
								{Key: "juels_per_fee_coin", Value: "302899999"},
								{Key: "config_digest", Value: "0003d956d0b4575d38cb5bb8b7b34d4b58a8b8cf9c6d4d925c15542c4ce135bd"},
								{Key: "epoch", Value: "9999"},
								{Key: "round", Value: "9"},
								{Key: "reimbursement", Value: "899999"},
								{Key: "observations", Value: "2724009999"},
								{Key: "observations", Value: "2726329999"},
								{Key: "observations", Value: "2726709999"},
								{Key: "observations", Value: "2726979999"},
								{Key: "observations", Value: "2726979999"},
								{Key: "observations", Value: "2726989999"},
								{Key: "observations", Value: "2727009999"},
								{Key: "observations", Value: "2727009999"},
								{Key: "observations", Value: "2727009999"},
								{Key: "observations", Value: "2727009999"},
								{Key: "observations", Value: "2727169999"},
								{Key: "observations", Value: "2727309999"}},
							},
						},
					},
				},
			},
		},
	}
	// Setup mocks.
	feedConfig := generateFeedConfig()
	feedConfig.ContractAddressBech32 = "terra13vgemxvpdshmhvwcz2nnr239948dxa2kz4glg8"
	chainConfig := generateChainConfig()
	chainReader := new(mocks.ChainReader)
	chainReader.On("TxsEvents",
		mock.Anything, // context
		mock.MatchedBy(func(query []string) bool {
			return query[0] == fmt.Sprintf(`wasm-set_config.contract_address='%s'`, feedConfig.ContractAddressBech32)
		}),
		&cosmosQuery.PageRequest{Limit: 1},
	).Return(setConfigRes, nil).Once()
	chainReader.On("TxsEvents",
		mock.Anything, // context
		mock.MatchedBy(func(query []string) bool {
			return query[0] == fmt.Sprintf(`wasm-new_transmission.contract_address='%s'`, feedConfig.ContractAddressBech32)
		}),
		&cosmosQuery.PageRequest{Limit: 1},
	).Return(newTransmissionRes, nil).Once()
	chainReader.On("ContractStore",
		mock.Anything, // context
		chainConfig.LinkTokenAddress,
		[]byte(fmt.Sprintf(`{"balance":{"address":"%s"}}`, feedConfig.ContractAddressBech32)),
	).Return(balanceRes, nil).Once()
	chainReader.On("ContractStore",
		mock.Anything, // context
		feedConfig.ProxyAddress,
		[]byte(`"link_available_for_payment"`),
	).Return([]byte(`{"amount":"-380431529018756503364"}`), nil).Once()
	// Execute Fetch()
	factory := NewEnvelopeSourceFactory(chainReader, newNullLogger())
	source, err := factory.NewSource(chainConfig, feedConfig)
	require.NoError(t, err)
	rawEnvelope, err := source.Fetch(ctx)
	require.NoError(t, err)
	// Assertions on returned envelope.
	envelope, ok := rawEnvelope.(relayMonitoring.Envelope)
	require.True(t, ok)
	require.Equal(t, envelope.ConfigDigest, ocr2types.ConfigDigest{0x0, 0x2, 0xc2, 0x45, 0xd0, 0xb4, 0x57, 0x5d, 0x38, 0xcb, 0x5b, 0xb8, 0xb7, 0xb3, 0x4d, 0x4b, 0x58, 0xa8, 0xb8, 0xcf, 0x9c, 0x6d, 0x4d, 0x92, 0x5c, 0x15, 0x54, 0x2c, 0x4c, 0xe0, 0x62, 0xac})
	require.Equal(t, envelope.Epoch, uint32(1732))
	require.Equal(t, envelope.Round, uint8(6))
	require.Equal(t, envelope.LatestAnswer, big.NewInt(2727000000))
	require.Equal(t, envelope.LatestTimestamp, time.Unix(1645206820, 0))

	require.Equal(t, envelope.ContractConfig.ConfigDigest, ocr2types.ConfigDigest{0x0, 0x2, 0xc2, 0x45, 0xd0, 0xb4, 0x57, 0x5d, 0x38, 0xcb, 0x5b, 0xb8, 0xb7, 0xb3, 0x4d, 0x4b, 0x58, 0xa8, 0xb8, 0xcf, 0x9c, 0x6d, 0x4d, 0x92, 0x5c, 0x15, 0x54, 0x2c, 0x4c, 0xe0, 0x62, 0xac})
	require.Equal(t, envelope.ContractConfig.ConfigCount, uint64(1))
	require.Equal(t, envelope.ContractConfig.Signers, []ocr2types.OnchainPublicKey{
		mustHexaToByteArr("0d04b01e7b81d79c5ff7c0ba8fb3f09bd12273c1c478a84d2f1547b2f754b5da"),
		mustHexaToByteArr("74f8fec126138a69bdbe6e05b9255a91f1269447ece88c57a07e5de83cb9ab9d"),
		mustHexaToByteArr("fdc93b531eff20d8dd7115f872f00d398ff568f24aaee732d2ce18fb62e27509"),
		mustHexaToByteArr("d77c5d17e2b43d166a343b312d7515957b2ba20395962e853781f99745e6f822"),
		mustHexaToByteArr("8697b65476d687349573e16bceb1a6ee748c3fe4981656dd3673808ff9af1ec6"),
		mustHexaToByteArr("a9d56584774baca0f3f451bcce230bc1c816cc41780e39c72d308fab79f23680"),
		mustHexaToByteArr("b15355db6d3ddba6a02f3c30da00d0516bb462b3360f80ac596308cea262f28c"),
		mustHexaToByteArr("fbe37462a4f3a8ed7e47eb296f097c8a760160a05f28f82b0baab96b144605d4"),
		mustHexaToByteArr("f117ac6e19a17b558b2bfc732780049184fa5924857dfff6aac07e0bcefd2b46"),
		mustHexaToByteArr("4c86e398b4708d30e597a90296c6ec9d306d17ea8f7f9d0e1267cfa2ea8dde89"),
		mustHexaToByteArr("7e1d60331ef87c908b64a89b75a878264fb3a2099a1a5225f214931e01ebe0a5"),
		mustHexaToByteArr("45a8e0c13d15972fc97d50cbb2e39bd0b4c75b8b4cd2dc5ba355b2cc702d494b"),
		mustHexaToByteArr("f9ad962c062fa5d47af67b229a368b5ef7f6a46f889117b676b9d8bf42632b96"),
		mustHexaToByteArr("e990e3738686976c46e35b11b5552a7a453ba1c62f14b84efb36e28a943d0cd0"),
		mustHexaToByteArr("1fc37e4833745ee9a9f2bb39c9810cd43b75431dc2fe60814a2f23d00f64e7ac"),
		mustHexaToByteArr("efdee2a3454a0a94449ed70a4e4a2d4fd113de4d56efe198d18adfa89a960dd1"),
	})
	require.Equal(t, envelope.ContractConfig.Transmitters, []ocr2types.Account{
		"terra1pagnmhas5q0twmkqn9kcvyzezfzjqnsukz47ha",
		"terra17tdm630tz3u5a47pxpysd4ktltycjlckew0g3a",
		"terra14szqs99f0jap3f4lwqvavnct23gq2jrj9qg6nf",
		"terra1x2hgypr08vf466sej4zqc5wzwdfh7mw7j8lwqc",
		"terra1q2l2ep768vrrjfmxacpa6kl8e8aezeru9646pw",
		"terra1rmt28lv8cs50wtxy7qpuvwlmphdjsm2lyvtqhh",
		"terra167h3sh8c4pgs8grxz24pam2x764flydv3h9pd8",
		"terra14va5jfwuuqs9pls379c5dc2d7lyvv2yul9nrnq",
		"terra1qv4w60avcm653a544apsq8r6z2dqzd89ndz3ta",
		"terra13cxfg5awyscnj7c7u4ycwgplf528krf8c90cp6",
		"terra1tfx3q08q780u9uu4qlw0drn375uktfka7kgh93",
		"terra16mk5h5ma7ksr2vqpxcsaqxjny2ea68jap8mf6a",
		"terra1h0ygh9tr8t8sc97ntq5tnams9vprchxmgl9ame",
		"terra17rzwyj72rxzm4g2g7zy72tqn67cl3nncvd5sj4",
		"terra14wxk4hy63wa5punxehvc3wg2wr64hhcdnz3qm0",
		"terra16vueyxmul8kczd0nxvw0ge7kzfzpmtsgqc9tup",
	})
	require.Equal(t, envelope.ContractConfig.F, uint8(5))
	require.Equal(t, envelope.ContractConfig.OnchainConfig, []byte{0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x96, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xd4, 0xa5, 0x10, 0x0})
	require.Equal(t, envelope.ContractConfig.OffchainConfigVersion, uint64(2))
	require.Equal(t, envelope.ContractConfig.OffchainConfig, []byte{0x8, 0x80, 0xc8, 0xaf, 0xa0, 0x25, 0x10, 0x80, 0xd8, 0x8e, 0xe1, 0x6f, 0x18, 0x80, 0xa0, 0xd9, 0xe6, 0x1d, 0x20, 0x80, 0x94, 0xeb, 0xdc, 0x3, 0x28, 0x80, 0x98, 0xdc, 0x93, 0x34, 0x30, 0xc, 0x3a, 0x10, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x42, 0x20, 0xdd, 0x87, 0xb2, 0x65, 0x84, 0x8a, 0x6e, 0x50, 0xf6, 0x94, 0x2a, 0x12, 0x42, 0xbd, 0x14, 0xa1, 0xca, 0xd7, 0xf2, 0x89, 0x53, 0xd5, 0xc, 0x3a, 0x97, 0xb6, 0x75, 0xec, 0x9d, 0xd4, 0xa4, 0xaa, 0x42, 0x20, 0x5f, 0x75, 0x6a, 0x2f, 0x3, 0x15, 0x45, 0xbd, 0xf5, 0xa3, 0x44, 0x31, 0x85, 0x8c, 0xf8, 0xac, 0x94, 0xa1, 0x14, 0x55, 0xa7, 0xc, 0x61, 0x4d, 0x58, 0x68, 0x25, 0xf4, 0x77, 0x42, 0xd7, 0xda, 0x42, 0x20, 0xdc, 0xe6, 0x7c, 0x83, 0xe5, 0x53, 0xe3, 0xc1, 0x46, 0x56, 0x30, 0x5c, 0x7a, 0x4d, 0x73, 0x4c, 0xb2, 0xc2, 0x53, 0xd2, 0x54, 0x5, 0xb4, 0x3f, 0x70, 0x6, 0xc2, 0x7, 0xa0, 0x81, 0x51, 0x41, 0x42, 0x20, 0x44, 0x7b, 0x7f, 0x4, 0x87, 0xdf, 0x47, 0x3c, 0xa4, 0xbc, 0x6e, 0xd4, 0xd, 0x82, 0xff, 0x39, 0xc, 0x77, 0xee, 0xc3, 0xb4, 0x5e, 0x8, 0x8a, 0xd6, 0x5, 0x26, 0x87, 0x60, 0x18, 0x90, 0x47, 0x42, 0x20, 0x4d, 0xfd, 0xb4, 0xa, 0xb3, 0x81, 0xe6, 0x1e, 0x7b, 0xa3, 0xa, 0xe9, 0xed, 0xb0, 0xc2, 0x7d, 0x1e, 0xac, 0xdc, 0x6, 0x6e, 0xb2, 0x24, 0xb0, 0x82, 0x9f, 0x10, 0x85, 0x16, 0x8b, 0x5d, 0xa4, 0x42, 0x20, 0xe5, 0x4, 0x93, 0x83, 0x90, 0xdf, 0x11, 0x5c, 0xa4, 0x50, 0xf6, 0x41, 0xe6, 0x44, 0xab, 0x32, 0x5a, 0x12, 0x8c, 0x82, 0x28, 0x2c, 0xaf, 0x62, 0x66, 0x76, 0xc4, 0xae, 0x16, 0xe8, 0xf3, 0x96, 0x42, 0x20, 0x37, 0xa2, 0x49, 0x29, 0xcb, 0x9b, 0x1d, 0xa0, 0x38, 0xe6, 0x86, 0x56, 0x9e, 0x90, 0xa0, 0xac, 0x7b, 0xd, 0xa0, 0xd, 0x2d, 0xe5, 0x17, 0xf7, 0x88, 0x57, 0xfb, 0xa9, 0xb0, 0x11, 0xd4, 0xfd, 0x42, 0x20, 0xc5, 0xb6, 0x7b, 0xa0, 0x65, 0x62, 0x10, 0xb, 0x63, 0x5, 0x82, 0xa5, 0x38, 0x19, 0xbf, 0x70, 0x88, 0x7, 0x14, 0xb5, 0xae, 0x55, 0xd1, 0xad, 0x37, 0xf6, 0x55, 0x24, 0x11, 0x55, 0x2, 0xc, 0x42, 0x20, 0xe5, 0x91, 0x48, 0xd5, 0xba, 0x18, 0x1c, 0xfa, 0xbd, 0x64, 0x46, 0xf7, 0x75, 0x1, 0xe8, 0x2a, 0x47, 0xe2, 0xed, 0x1e, 0x65, 0xa1, 0xbd, 0x39, 0xd4, 0x53, 0xff, 0x3c, 0xb5, 0x41, 0x99, 0xc9, 0x42, 0x20, 0x4b, 0xab, 0x7d, 0x9, 0xa7, 0xde, 0x89, 0x11, 0xa, 0x36, 0x14, 0xca, 0xe5, 0x92, 0x8e, 0xd5, 0xf2, 0x4d, 0xf, 0xe5, 0x40, 0xd9, 0x13, 0xb5, 0x5d, 0xdc, 0xc5, 0x35, 0x3b, 0xa5, 0xae, 0x86, 0x42, 0x20, 0x6e, 0x2e, 0x8c, 0x34, 0x5c, 0x22, 0xbd, 0x11, 0x9e, 0x9c, 0xf3, 0xd4, 0x58, 0x30, 0x77, 0x10, 0x40, 0x74, 0x38, 0x12, 0x57, 0x87, 0xd6, 0x13, 0x95, 0xbf, 0x8f, 0xcb, 0xf9, 0xa4, 0x56, 0x1, 0x42, 0x20, 0x9, 0x13, 0xfa, 0xac, 0xc0, 0x1c, 0xe5, 0xfa, 0xe0, 0xd1, 0x7a, 0xf4, 0xa8, 0xce, 0x31, 0x12, 0x9, 0x9b, 0xfd, 0x4d, 0x24, 0xb4, 0x77, 0xb9, 0x5e, 0x5a, 0x89, 0x42, 0xee, 0xc2, 0xc1, 0xa8, 0x42, 0x20, 0x71, 0xe3, 0xce, 0x7c, 0x98, 0x42, 0x9e, 0xe1, 0xfe, 0xf9, 0x62, 0x47, 0x5a, 0x74, 0x99, 0x9f, 0xf9, 0xbd, 0x60, 0xe1, 0xb0, 0x8d, 0x62, 0x20, 0x68, 0xd, 0xff, 0x34, 0x2b, 0xda, 0x9b, 0xc2, 0x42, 0x20, 0xd3, 0x6, 0xd2, 0xaa, 0xa4, 0x28, 0x77, 0xd5, 0x29, 0x72, 0x61, 0x73, 0xd3, 0xdb, 0xd8, 0x45, 0x87, 0xb2, 0xe3, 0x6d, 0x3d, 0x12, 0x64, 0xd6, 0x70, 0x5b, 0xf3, 0xb7, 0xaf, 0x24, 0x5c, 0x9f, 0x42, 0x20, 0x51, 0xaa, 0x9a, 0xb4, 0xe, 0xde, 0x3, 0x4, 0x3c, 0xa3, 0x4a, 0x1e, 0xa7, 0xd4, 0x50, 0x9e, 0x7d, 0x52, 0x3f, 0xbd, 0x2, 0x57, 0xe2, 0x63, 0xb, 0x5a, 0xf5, 0x1, 0x6e, 0x89, 0x13, 0x67, 0x42, 0x20, 0x2f, 0x40, 0xf0, 0x74, 0xef, 0x8c, 0x6f, 0x3b, 0xb, 0xcd, 0x24, 0xff, 0x6a, 0x1f, 0x4, 0x9f, 0xfd, 0xd0, 0xf9, 0xf1, 0x11, 0x1a, 0x72, 0x3c, 0x99, 0xa9, 0xce, 0x8, 0x15, 0xe7, 0x1e, 0x18, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x50, 0x6e, 0x48, 0x44, 0x64, 0x41, 0x74, 0x66, 0x69, 0x65, 0x39, 0x79, 0x75, 0x37, 0x65, 0x39, 0x78, 0x75, 0x54, 0x61, 0x68, 0x69, 0x52, 0x66, 0x35, 0x53, 0x36, 0x73, 0x6a, 0x41, 0x46, 0x63, 0x36, 0x52, 0x33, 0x51, 0x78, 0x64, 0x5a, 0x67, 0x4d, 0x72, 0x36, 0x64, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x43, 0x47, 0x46, 0x4c, 0x72, 0x5a, 0x42, 0x66, 0x38, 0x33, 0x78, 0x74, 0x38, 0x55, 0x70, 0x4e, 0x54, 0x71, 0x42, 0x68, 0x4e, 0x73, 0x77, 0x38, 0x73, 0x51, 0x51, 0x42, 0x72, 0x52, 0x72, 0x4e, 0x34, 0x56, 0x35, 0x70, 0x7a, 0x32, 0x64, 0x38, 0x6a, 0x6d, 0x41, 0x70, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x43, 0x4c, 0x6b, 0x55, 0x67, 0x6e, 0x50, 0x67, 0x44, 0x34, 0x58, 0x37, 0x6f, 0x32, 0x6b, 0x6f, 0x37, 0x75, 0x71, 0x68, 0x78, 0x34, 0x72, 0x4e, 0x79, 0x6f, 0x37, 0x4c, 0x48, 0x42, 0x33, 0x59, 0x72, 0x46, 0x67, 0x57, 0x70, 0x34, 0x56, 0x35, 0x43, 0x6a, 0x73, 0x79, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4a, 0x50, 0x41, 0x54, 0x51, 0x42, 0x5a, 0x32, 0x6f, 0x56, 0x6a, 0x77, 0x65, 0x55, 0x68, 0x79, 0x54, 0x4a, 0x33, 0x4d, 0x33, 0x71, 0x50, 0x39, 0x6a, 0x68, 0x66, 0x51, 0x69, 0x32, 0x57, 0x6f, 0x48, 0x55, 0x6e, 0x61, 0x31, 0x68, 0x70, 0x57, 0x6b, 0x67, 0x76, 0x44, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4d, 0x39, 0x71, 0x39, 0x48, 0x4c, 0x46, 0x34, 0x51, 0x35, 0x4e, 0x4d, 0x33, 0x45, 0x47, 0x4d, 0x50, 0x54, 0x78, 0x5a, 0x56, 0x76, 0x33, 0x50, 0x6f, 0x46, 0x68, 0x7a, 0x42, 0x37, 0x74, 0x47, 0x44, 0x66, 0x7a, 0x63, 0x6d, 0x36, 0x4e, 0x47, 0x5a, 0x75, 0x62, 0x54, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x47, 0x65, 0x6d, 0x78, 0x45, 0x39, 0x6a, 0x64, 0x4d, 0x41, 0x75, 0x71, 0x4d, 0x4b, 0x78, 0x64, 0x70, 0x54, 0x32, 0x33, 0x56, 0x75, 0x65, 0x46, 0x65, 0x71, 0x4b, 0x67, 0x4a, 0x39, 0x74, 0x54, 0x50, 0x31, 0x55, 0x64, 0x38, 0x54, 0x44, 0x43, 0x36, 0x58, 0x43, 0x58, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x52, 0x67, 0x59, 0x62, 0x4d, 0x6a, 0x74, 0x6b, 0x39, 0x72, 0x73, 0x6b, 0x64, 0x32, 0x6e, 0x79, 0x78, 0x57, 0x6e, 0x32, 0x63, 0x62, 0x73, 0x6d, 0x54, 0x31, 0x52, 0x72, 0x67, 0x48, 0x7a, 0x37, 0x4a, 0x63, 0x61, 0x57, 0x69, 0x57, 0x76, 0x63, 0x73, 0x61, 0x70, 0x6e, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x42, 0x36, 0x63, 0x6d, 0x59, 0x47, 0x32, 0x32, 0x6d, 0x6e, 0x59, 0x75, 0x4e, 0x67, 0x44, 0x65, 0x55, 0x42, 0x53, 0x55, 0x7a, 0x45, 0x51, 0x6f, 0x68, 0x48, 0x33, 0x55, 0x75, 0x48, 0x6b, 0x32, 0x50, 0x70, 0x6f, 0x52, 0x50, 0x4a, 0x7a, 0x6d, 0x4b, 0x70, 0x75, 0x63, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4d, 0x58, 0x7a, 0x39, 0x68, 0x4b, 0x63, 0x73, 0x64, 0x33, 0x68, 0x51, 0x56, 0x59, 0x75, 0x39, 0x6d, 0x42, 0x4c, 0x45, 0x54, 0x52, 0x55, 0x33, 0x6b, 0x76, 0x55, 0x70, 0x45, 0x41, 0x71, 0x4a, 0x55, 0x64, 0x72, 0x5a, 0x39, 0x73, 0x78, 0x65, 0x31, 0x64, 0x64, 0x78, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4d, 0x55, 0x4e, 0x45, 0x6a, 0x58, 0x64, 0x53, 0x45, 0x4a, 0x4d, 0x56, 0x51, 0x68, 0x44, 0x6e, 0x64, 0x71, 0x36, 0x71, 0x74, 0x65, 0x79, 0x45, 0x39, 0x54, 0x65, 0x39, 0x7a, 0x32, 0x45, 0x38, 0x53, 0x7a, 0x73, 0x45, 0x42, 0x72, 0x6d, 0x56, 0x79, 0x50, 0x4d, 0x79, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x41, 0x6f, 0x71, 0x4c, 0x62, 0x5a, 0x62, 0x70, 0x47, 0x4b, 0x59, 0x64, 0x35, 0x62, 0x36, 0x79, 0x42, 0x41, 0x75, 0x48, 0x4e, 0x47, 0x7a, 0x56, 0x4c, 0x34, 0x43, 0x54, 0x38, 0x55, 0x52, 0x55, 0x44, 0x68, 0x32, 0x6d, 0x72, 0x74, 0x38, 0x6e, 0x33, 0x6a, 0x46, 0x78, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x52, 0x48, 0x52, 0x4c, 0x41, 0x73, 0x6b, 0x53, 0x74, 0x4d, 0x38, 0x46, 0x46, 0x59, 0x51, 0x73, 0x35, 0x44, 0x35, 0x65, 0x46, 0x62, 0x43, 0x37, 0x75, 0x4b, 0x6f, 0x70, 0x39, 0x44, 0x48, 0x6b, 0x44, 0x7a, 0x53, 0x61, 0x5a, 0x42, 0x57, 0x4b, 0x45, 0x42, 0x31, 0x54, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4b, 0x5a, 0x79, 0x44, 0x46, 0x61, 0x32, 0x75, 0x63, 0x70, 0x69, 0x32, 0x6d, 0x4a, 0x6e, 0x4c, 0x37, 0x79, 0x72, 0x69, 0x56, 0x47, 0x52, 0x6d, 0x44, 0x38, 0x42, 0x6f, 0x38, 0x39, 0x76, 0x6e, 0x72, 0x61, 0x4b, 0x67, 0x5a, 0x77, 0x31, 0x56, 0x59, 0x6a, 0x73, 0x78, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4c, 0x39, 0x53, 0x4e, 0x7a, 0x42, 0x50, 0x6f, 0x4d, 0x34, 0x71, 0x6d, 0x51, 0x53, 0x48, 0x69, 0x37, 0x78, 0x32, 0x33, 0x74, 0x58, 0x48, 0x73, 0x4d, 0x62, 0x5a, 0x53, 0x4c, 0x44, 0x43, 0x74, 0x35, 0x56, 0x54, 0x77, 0x4a, 0x42, 0x79, 0x59, 0x34, 0x53, 0x68, 0x4d, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4a, 0x32, 0x79, 0x54, 0x5a, 0x6b, 0x61, 0x44, 0x5a, 0x45, 0x51, 0x74, 0x74, 0x73, 0x70, 0x48, 0x36, 0x70, 0x36, 0x4c, 0x39, 0x55, 0x68, 0x53, 0x45, 0x4e, 0x62, 0x57, 0x42, 0x4d, 0x58, 0x4b, 0x46, 0x4d, 0x6a, 0x61, 0x76, 0x77, 0x4b, 0x41, 0x37, 0x6b, 0x4c, 0x41, 0x4a, 0x34, 0x31, 0x32, 0x44, 0x33, 0x4b, 0x6f, 0x6f, 0x57, 0x4d, 0x6b, 0x6a, 0x48, 0x71, 0x31, 0x55, 0x53, 0x42, 0x57, 0x61, 0x54, 0x4e, 0x52, 0x6a, 0x43, 0x44, 0x59, 0x74, 0x70, 0x77, 0x38, 0x66, 0x4a, 0x75, 0x55, 0x39, 0x39, 0x78, 0x45, 0x57, 0x31, 0x52, 0x62, 0x6d, 0x59, 0x4e, 0x38, 0x6f, 0x48, 0x75, 0x45, 0x39, 0x77, 0x52, 0x11, 0x10, 0xc0, 0x8d, 0xb7, 0x1, 0x20, 0xc0, 0x8d, 0xb7, 0x1, 0x28, 0x80, 0xe8, 0xed, 0xa1, 0xba, 0x1, 0x60, 0x80, 0xe4, 0x97, 0xd0, 0x12, 0x68, 0x80, 0x94, 0xeb, 0xdc, 0x3, 0x70, 0x80, 0x94, 0xeb, 0xdc, 0x3, 0x78, 0x80, 0x94, 0xeb, 0xdc, 0x3, 0x82, 0x1, 0xe4, 0x2, 0xa, 0x20, 0x4c, 0xec, 0xde, 0x15, 0xbb, 0x91, 0x5f, 0xa6, 0xc9, 0xdd, 0xcc, 0x23, 0x6e, 0x61, 0x51, 0xbc, 0x4e, 0x14, 0xfb, 0xa5, 0x62, 0xad, 0x1b, 0x53, 0xf6, 0xc0, 0x20, 0x0, 0x92, 0x35, 0x46, 0x73, 0x12, 0x20, 0x9d, 0xab, 0xb5, 0x5, 0x67, 0x58, 0xa0, 0xed, 0xe7, 0x84, 0x43, 0xd5, 0xd7, 0xc4, 0xcf, 0x67, 0x98, 0xfa, 0x49, 0x4c, 0x90, 0xcc, 0x48, 0x10, 0x3e, 0x8, 0x4c, 0x76, 0x92, 0xcf, 0x9, 0xad, 0x1a, 0x10, 0x90, 0x99, 0x1f, 0xc1, 0xcd, 0x72, 0x94, 0x1e, 0xcb, 0x73, 0x82, 0x8c, 0xca, 0x1, 0x36, 0x1b, 0x1a, 0x10, 0xb0, 0x4f, 0xc4, 0x2f, 0x48, 0x82, 0x0, 0x62, 0xb4, 0x53, 0x82, 0xd2, 0x94, 0x16, 0xf5, 0xd3, 0x1a, 0x10, 0xe3, 0xde, 0xb5, 0x3, 0x4e, 0x9e, 0xe7, 0x1a, 0xd8, 0xdc, 0x91, 0x3a, 0xc7, 0xc3, 0x7f, 0x18, 0x1a, 0x10, 0x5e, 0xff, 0x2, 0x38, 0xca, 0xab, 0x4f, 0xc7, 0x1, 0x76, 0x24, 0x54, 0x94, 0xc4, 0xdd, 0x64, 0x1a, 0x10, 0xbc, 0xb3, 0xa5, 0x97, 0xcf, 0xb4, 0x33, 0x3d, 0xb5, 0x3d, 0x93, 0xa5, 0xd8, 0xe2, 0xfa, 0xfa, 0x1a, 0x10, 0xe, 0xa8, 0x2d, 0x1b, 0x49, 0xbb, 0xd0, 0xbc, 0x12, 0x36, 0x63, 0x74, 0xee, 0x6c, 0xe2, 0x4d, 0x1a, 0x10, 0x96, 0xc5, 0x6d, 0xf, 0x52, 0x5, 0x3f, 0xe4, 0xde, 0x1d, 0xf8, 0xa, 0xbe, 0xdf, 0xf7, 0x84, 0x1a, 0x10, 0x5f, 0x7c, 0x90, 0xa3, 0x2a, 0x41, 0x7d, 0x6f, 0xd5, 0x3c, 0xd5, 0x3, 0x79, 0x92, 0xe0, 0x39, 0x1a, 0x10, 0x30, 0x9a, 0x8f, 0x2b, 0xb4, 0x75, 0x7d, 0xca, 0x2, 0x7f, 0xcb, 0xfe, 0x90, 0x13, 0xa, 0x49, 0x1a, 0x10, 0x9, 0xbd, 0x95, 0xef, 0xaa, 0x74, 0x60, 0x40, 0xa8, 0x37, 0x96, 0x9a, 0xdd, 0xf3, 0x1f, 0x0, 0x1a, 0x10, 0xd3, 0xa4, 0xee, 0xf1, 0xb8, 0x78, 0x50, 0x4, 0x19, 0x9b, 0x7b, 0x4d, 0xd8, 0x10, 0x14, 0xd0, 0x1a, 0x10, 0x75, 0x5e, 0x2c, 0xe9, 0xf4, 0x71, 0x8, 0x12, 0xb9, 0x9c, 0x9f, 0x83, 0x40, 0x37, 0xb0, 0x13, 0x1a, 0x10, 0xd4, 0x3b, 0x38, 0x2b, 0xff, 0xaf, 0xec, 0x64, 0xfd, 0x1c, 0x9c, 0xa8, 0xa8, 0x91, 0xde, 0xab, 0x1a, 0x10, 0xbd, 0x83, 0x7b, 0x39, 0x7, 0x9c, 0x27, 0xe5, 0x65, 0xe5, 0xf7, 0xd8, 0x75, 0x17, 0xa, 0x42, 0x1a, 0x10, 0x53, 0x22, 0x80, 0x7a, 0x60, 0xfa, 0x8f, 0x6d, 0x55, 0xc0, 0x31, 0x11, 0x6f, 0x12, 0x1e, 0x3b, 0x1a, 0x10, 0x7a, 0x1f, 0x40, 0xa1, 0x96, 0x74, 0x61, 0xf6, 0x2b, 0x49, 0x1f, 0x9a, 0x86, 0x92, 0xbb, 0x7d})

	require.Equal(t, envelope.BlockNumber, uint64(987654321))
	require.Equal(t, envelope.Transmitter, ocr2types.Account("terra16vueyxmul8kczd0nxvw0ge7kzfzpmtsgqc9tup"))
	require.Equal(t, envelope.LinkBalance, big.NewInt(1234567890987654321))
	expectedLinkAvailableForPayment, _ := new(big.Int).SetString("-380431529018756503364", 10)
	require.Equal(t, envelope.LinkAvailableForPayment, expectedLinkAvailableForPayment)
	require.Equal(t, envelope.JuelsPerFeeCoin, big.NewInt(302815889))
	require.Equal(t, envelope.AggregatorRoundID, uint32(452))
}

func mustHexaToByteArr(encoded string) []byte {
	decoded, err := hex.DecodeString(encoded)
	if err != nil {
		panic(err)
	}
	return decoded
}
