// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/smartcontractkit/chainlink-terra/pkg/terra/client"

	cryptotypes "github.com/cosmos/cosmos-sdk/crypto/types"

	mock "github.com/stretchr/testify/mock"

	query "github.com/cosmos/cosmos-sdk/types/query"

	tmservice "github.com/cosmos/cosmos-sdk/client/grpc/tmservice"

	tx "github.com/cosmos/cosmos-sdk/types/tx"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ReaderWriter is an autogenerated mock type for the ReaderWriter type
type ReaderWriter struct {
	mock.Mock
}

// Account provides a mock function with given fields: ctx, address
func (_m *ReaderWriter) Account(ctx context.Context, address types.AccAddress) (uint64, uint64, error) {
	ret := _m.Called(ctx, address)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress) uint64); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, types.AccAddress) uint64); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, types.AccAddress) error); ok {
		r2 = rf(ctx, address)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Balance provides a mock function with given fields: ctx, addr, denom
func (_m *ReaderWriter) Balance(ctx context.Context, addr types.AccAddress, denom string) (*types.Coin, error) {
	ret := _m.Called(ctx, addr, denom)

	var r0 *types.Coin
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, string) *types.Coin); ok {
		r0 = rf(ctx, addr, denom)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Coin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AccAddress, string) error); ok {
		r1 = rf(ctx, addr, denom)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchSimulateUnsigned provides a mock function with given fields: ctx, msgs, sequence
func (_m *ReaderWriter) BatchSimulateUnsigned(ctx context.Context, msgs client.SimMsgs, sequence uint64) (*client.BatchSimResults, error) {
	ret := _m.Called(ctx, msgs, sequence)

	var r0 *client.BatchSimResults
	if rf, ok := ret.Get(0).(func(context.Context, client.SimMsgs, uint64) *client.BatchSimResults); ok {
		r0 = rf(ctx, msgs, sequence)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BatchSimResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, client.SimMsgs, uint64) error); ok {
		r1 = rf(ctx, msgs, sequence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockByHeight provides a mock function with given fields: ctx, height
func (_m *ReaderWriter) BlockByHeight(ctx context.Context, height int64) (*tmservice.GetBlockByHeightResponse, error) {
	ret := _m.Called(ctx, height)

	var r0 *tmservice.GetBlockByHeightResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64) *tmservice.GetBlockByHeightResponse); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmservice.GetBlockByHeightResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Broadcast provides a mock function with given fields: ctx, txBytes, mode
func (_m *ReaderWriter) Broadcast(ctx context.Context, txBytes []byte, mode tx.BroadcastMode) (*tx.BroadcastTxResponse, error) {
	ret := _m.Called(ctx, txBytes, mode)

	var r0 *tx.BroadcastTxResponse
	if rf, ok := ret.Get(0).(func(context.Context, []byte, tx.BroadcastMode) *tx.BroadcastTxResponse); ok {
		r0 = rf(ctx, txBytes, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.BroadcastTxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, tx.BroadcastMode) error); ok {
		r1 = rf(ctx, txBytes, mode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContractStore provides a mock function with given fields: ctx, contractAddress, queryMsg
func (_m *ReaderWriter) ContractStore(ctx context.Context, contractAddress types.AccAddress, queryMsg []byte) ([]byte, error) {
	ret := _m.Called(ctx, contractAddress, queryMsg)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, []byte) []byte); ok {
		r0 = rf(ctx, contractAddress, queryMsg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AccAddress, []byte) error); ok {
		r1 = rf(ctx, contractAddress, queryMsg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAndSign provides a mock function with given fields: msgs, account, sequence, gasLimit, gasLimitMultiplier, gasPrice, signer, timeoutHeight
func (_m *ReaderWriter) CreateAndSign(msgs []types.Msg, account uint64, sequence uint64, gasLimit uint64, gasLimitMultiplier float64, gasPrice types.DecCoin, signer cryptotypes.PrivKey, timeoutHeight uint64) ([]byte, error) {
	ret := _m.Called(msgs, account, sequence, gasLimit, gasLimitMultiplier, gasPrice, signer, timeoutHeight)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]types.Msg, uint64, uint64, uint64, float64, types.DecCoin, cryptotypes.PrivKey, uint64) []byte); ok {
		r0 = rf(msgs, account, sequence, gasLimit, gasLimitMultiplier, gasPrice, signer, timeoutHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.Msg, uint64, uint64, uint64, float64, types.DecCoin, cryptotypes.PrivKey, uint64) error); ok {
		r1 = rf(msgs, account, sequence, gasLimit, gasLimitMultiplier, gasPrice, signer, timeoutHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestBlock provides a mock function with given fields: ctx
func (_m *ReaderWriter) LatestBlock(ctx context.Context) (*tmservice.GetLatestBlockResponse, error) {
	ret := _m.Called(ctx)

	var r0 *tmservice.GetLatestBlockResponse
	if rf, ok := ret.Get(0).(func(context.Context) *tmservice.GetLatestBlockResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmservice.GetLatestBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignAndBroadcast provides a mock function with given fields: ctx, msgs, accountNum, sequence, gasPrice, signer, mode
func (_m *ReaderWriter) SignAndBroadcast(ctx context.Context, msgs []types.Msg, accountNum uint64, sequence uint64, gasPrice types.DecCoin, signer cryptotypes.PrivKey, mode tx.BroadcastMode) (*tx.BroadcastTxResponse, error) {
	ret := _m.Called(ctx, msgs, accountNum, sequence, gasPrice, signer, mode)

	var r0 *tx.BroadcastTxResponse
	if rf, ok := ret.Get(0).(func(context.Context, []types.Msg, uint64, uint64, types.DecCoin, cryptotypes.PrivKey, tx.BroadcastMode) *tx.BroadcastTxResponse); ok {
		r0 = rf(ctx, msgs, accountNum, sequence, gasPrice, signer, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.BroadcastTxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []types.Msg, uint64, uint64, types.DecCoin, cryptotypes.PrivKey, tx.BroadcastMode) error); ok {
		r1 = rf(ctx, msgs, accountNum, sequence, gasPrice, signer, mode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Simulate provides a mock function with given fields: ctx, txBytes
func (_m *ReaderWriter) Simulate(ctx context.Context, txBytes []byte) (*tx.SimulateResponse, error) {
	ret := _m.Called(ctx, txBytes)

	var r0 *tx.SimulateResponse
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *tx.SimulateResponse); ok {
		r0 = rf(ctx, txBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.SimulateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, txBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimulateUnsigned provides a mock function with given fields: ctx, msgs, sequence
func (_m *ReaderWriter) SimulateUnsigned(ctx context.Context, msgs []types.Msg, sequence uint64) (*tx.SimulateResponse, error) {
	ret := _m.Called(ctx, msgs, sequence)

	var r0 *tx.SimulateResponse
	if rf, ok := ret.Get(0).(func(context.Context, []types.Msg, uint64) *tx.SimulateResponse); ok {
		r0 = rf(ctx, msgs, sequence)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.SimulateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []types.Msg, uint64) error); ok {
		r1 = rf(ctx, msgs, sequence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tx provides a mock function with given fields: ctx, hash
func (_m *ReaderWriter) Tx(ctx context.Context, hash string) (*tx.GetTxResponse, error) {
	ret := _m.Called(ctx, hash)

	var r0 *tx.GetTxResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *tx.GetTxResponse); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.GetTxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxsEvents provides a mock function with given fields: ctx, events, paginationParams
func (_m *ReaderWriter) TxsEvents(ctx context.Context, events []string, paginationParams *query.PageRequest) (*tx.GetTxsEventResponse, error) {
	ret := _m.Called(ctx, events, paginationParams)

	var r0 *tx.GetTxsEventResponse
	if rf, ok := ret.Get(0).(func(context.Context, []string, *query.PageRequest) *tx.GetTxsEventResponse); ok {
		r0 = rf(ctx, events, paginationParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.GetTxsEventResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, *query.PageRequest) error); ok {
		r1 = rf(ctx, events, paginationParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
