// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	cryptotypes "github.com/cosmos/cosmos-sdk/crypto/types"
	mock "github.com/stretchr/testify/mock"

	tmservice "github.com/cosmos/cosmos-sdk/client/grpc/tmservice"

	tx "github.com/cosmos/cosmos-sdk/types/tx"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ReaderWriter is an autogenerated mock type for the ReaderWriter type
type ReaderWriter struct {
	mock.Mock
}

// Account provides a mock function with given fields: address
func (_m *ReaderWriter) Account(address types.AccAddress) (uint64, uint64, error) {
	ret := _m.Called(address)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(types.AccAddress) uint64); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(types.AccAddress) uint64); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(types.AccAddress) error); ok {
		r2 = rf(address)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Balance provides a mock function with given fields: addr, denom
func (_m *ReaderWriter) Balance(addr types.AccAddress, denom string) (*types.Coin, error) {
	ret := _m.Called(addr, denom)

	var r0 *types.Coin
	if rf, ok := ret.Get(0).(func(types.AccAddress, string) *types.Coin); ok {
		r0 = rf(addr, denom)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Coin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.AccAddress, string) error); ok {
		r1 = rf(addr, denom)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockByHeight provides a mock function with given fields: height
func (_m *ReaderWriter) BlockByHeight(height int64) (*tmservice.GetBlockByHeightResponse, error) {
	ret := _m.Called(height)

	var r0 *tmservice.GetBlockByHeightResponse
	if rf, ok := ret.Get(0).(func(int64) *tmservice.GetBlockByHeightResponse); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmservice.GetBlockByHeightResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContractStore provides a mock function with given fields: contractAddress, queryMsg
func (_m *ReaderWriter) ContractStore(contractAddress string, queryMsg []byte) ([]byte, error) {
	ret := _m.Called(contractAddress, queryMsg)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, []byte) []byte); ok {
		r0 = rf(contractAddress, queryMsg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(contractAddress, queryMsg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GasPrice provides a mock function with given fields:
func (_m *ReaderWriter) GasPrice() types.DecCoin {
	ret := _m.Called()

	var r0 types.DecCoin
	if rf, ok := ret.Get(0).(func() types.DecCoin); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.DecCoin)
	}

	return r0
}

// LatestBlock provides a mock function with given fields:
func (_m *ReaderWriter) LatestBlock() (*tmservice.GetLatestBlockResponse, error) {
	ret := _m.Called()

	var r0 *tmservice.GetLatestBlockResponse
	if rf, ok := ret.Get(0).(func() *tmservice.GetLatestBlockResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmservice.GetLatestBlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignAndBroadcast provides a mock function with given fields: msgs, accountNum, sequence, gasPrice, signer, mode
func (_m *ReaderWriter) SignAndBroadcast(msgs []types.Msg, accountNum uint64, sequence uint64, gasPrice types.DecCoin, signer cryptotypes.PrivKey, mode tx.BroadcastMode) (*tx.BroadcastTxResponse, error) {
	ret := _m.Called(msgs, accountNum, sequence, gasPrice, signer, mode)

	var r0 *tx.BroadcastTxResponse
	if rf, ok := ret.Get(0).(func([]types.Msg, uint64, uint64, types.DecCoin, cryptotypes.PrivKey, tx.BroadcastMode) *tx.BroadcastTxResponse); ok {
		r0 = rf(msgs, accountNum, sequence, gasPrice, signer, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.BroadcastTxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.Msg, uint64, uint64, types.DecCoin, cryptotypes.PrivKey, tx.BroadcastMode) error); ok {
		r1 = rf(msgs, accountNum, sequence, gasPrice, signer, mode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tx provides a mock function with given fields: hash
func (_m *ReaderWriter) Tx(hash string) (*tx.GetTxResponse, error) {
	ret := _m.Called(hash)

	var r0 *tx.GetTxResponse
	if rf, ok := ret.Get(0).(func(string) *tx.GetTxResponse); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.GetTxResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxsEvents provides a mock function with given fields: events
func (_m *ReaderWriter) TxsEvents(events []string) (*tx.GetTxsEventResponse, error) {
	ret := _m.Called(events)

	var r0 *tx.GetTxsEventResponse
	if rf, ok := ret.Get(0).(func([]string) *tx.GetTxsEventResponse); ok {
		r0 = rf(events)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tx.GetTxsEventResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(events)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
